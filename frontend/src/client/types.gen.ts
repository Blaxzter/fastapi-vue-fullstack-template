// This file is auto-generated by @hey-api/openapi-ts

/**
 * ExampleRequest
 */
export type ExampleRequest = {
    /**
     * Name
     * The name to be processed
     */
    name: string;
    /**
     * Age
     * The age of the person, must be non-negative
     */
    age?: number | null;
};

/**
 * ExampleResponse
 */
export type ExampleResponse = {
    /**
     * Message
     * The response message
     */
    message: string;
    /**
     * Claims
     * The claims associated with the response
     */
    claims: {
        [key: string]: unknown;
    };
    /**
     * Test Value
     * A test integer value
     */
    test_value?: number | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * UserProfile
 */
export type UserProfile = {
    /**
     * Sub
     */
    sub: string;
    /**
     * Name
     */
    name?: string | null;
    /**
     * Nickname
     */
    nickname?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Picture
     */
    picture?: string | null;
    /**
     * Bio
     */
    bio?: string | null;
    /**
     * Email Verified
     */
    email_verified?: boolean | null;
};

/**
 * UserProfileUpdate
 */
export type UserProfileUpdate = {
    /**
     * Name
     * User's display name
     */
    name?: string | null;
    /**
     * Nickname
     * User's nickname
     */
    nickname?: string | null;
    /**
     * Picture
     * URL to user's profile picture
     */
    picture?: string | null;
    /**
     * Bio
     * User's biography
     */
    bio?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type HttpException = {
    detail: string;
};

export type TestExampleEndpointData = {
    body: ExampleRequest;
    path?: never;
    query?: never;
    url: '/api/v1/test/';
};

export type TestExampleEndpointErrors = {
    /**
     * Bad Request
     */
    400: HttpException;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TestExampleEndpointError = TestExampleEndpointErrors[keyof TestExampleEndpointErrors];

export type TestExampleEndpointResponses = {
    /**
     * Successful Response
     */
    200: ExampleResponse;
};

export type TestExampleEndpointResponse = TestExampleEndpointResponses[keyof TestExampleEndpointResponses];

export type UsersGetCurrentUserProfileData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersGetCurrentUserProfileErrors = {
    /**
     * Bad Request
     */
    400: HttpException;
};

export type UsersGetCurrentUserProfileError = UsersGetCurrentUserProfileErrors[keyof UsersGetCurrentUserProfileErrors];

export type UsersGetCurrentUserProfileResponses = {
    /**
     * Successful Response
     */
    200: UserProfile;
};

export type UsersGetCurrentUserProfileResponse = UsersGetCurrentUserProfileResponses[keyof UsersGetCurrentUserProfileResponses];

export type UsersUpdateUserProfileData = {
    body: UserProfileUpdate;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersUpdateUserProfileErrors = {
    /**
     * Bad Request
     */
    400: HttpException;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserProfileError = UsersUpdateUserProfileErrors[keyof UsersUpdateUserProfileErrors];

export type UsersUpdateUserProfileResponses = {
    /**
     * Successful Response
     */
    200: UserProfile;
};

export type UsersUpdateUserProfileResponse = UsersUpdateUserProfileResponses[keyof UsersUpdateUserProfileResponses];

export type UsersGetAuth0ManagementUrlData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/auth0-management-url';
};

export type UsersGetAuth0ManagementUrlErrors = {
    /**
     * Bad Request
     */
    400: HttpException;
};

export type UsersGetAuth0ManagementUrlError = UsersGetAuth0ManagementUrlErrors[keyof UsersGetAuth0ManagementUrlErrors];

export type UsersGetAuth0ManagementUrlResponses = {
    /**
     * Response Users-Get Auth0 Management Url
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type UsersGetAuth0ManagementUrlResponse = UsersGetAuth0ManagementUrlResponses[keyof UsersGetAuth0ManagementUrlResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8000' | (string & {});
};